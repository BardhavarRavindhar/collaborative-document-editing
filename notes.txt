// Collaborative Document Editing API Design Outline

// 1. Project Setup and Technologies
//    - Use Node.js with Express.js for the backend framework
//    - MongoDB or PostgreSQL for database management
//    - WebSocket (e.g., Socket.IO) for real-time communication
//    - JSON Web Tokens (JWT) for user authentication

// 2. API Structure
//    a. Routes:
//       - `/documents` for CRUD operations on documents
//       - `/documents/:id/comments` for managing comments
//       - `/documents/:id/history` for accessing version history
//       - `/auth` for user authentication

// 3. Models
//    a. User Model:
//       - `id`: String (Unique user identifier)
//       - `username`: String
//       - `email`: String
//       - `password`: Hashed string
//       - `permissions`: Enum (READ, WRITE, COMMENT)

//    b. Document Model:
//       - `id`: String (Unique document identifier)
//       - `title`: String
//       - `content`: String
//       - `versionHistory`: Array of objects { version, content, timestamp, editorId }
//       - `comments`: Array of objects { commentId, line, text, authorId, timestamp, resolved: Boolean }
//       - `collaborators`: Array of user IDs

// 4. Endpoints
//    a. Document CRUD:
//       - **POST /documents**: Create a new document
//       - **GET /documents/:id**: Read a specific document
//       - **PUT /documents/:id**: Update a document's content and sync changes in real-time
//       - **DELETE /documents/:id**: Delete a document

//    b. Comments:
//       - **POST /documents/:id/comments**: Add a comment to a specific line
//       - **PUT /documents/:id/comments/:commentId**: Resolve or edit a comment
//       - **DELETE /documents/:id/comments/:commentId**: Delete a comment

//    c. Version Control:
//       - **GET /documents/:id/history**: Retrieve version history
//       - **POST /documents/:id/revert**: Revert to a specific version

//    d. User Authentication:
//       - **POST /auth/register**: Register a new user
//       - **POST /auth/login**: Authenticate and obtain a JWT

// 5. Real-Time Collaboration with WebSockets
//    - Establish WebSocket connection on document load
//    - Broadcast changes in real-time to all connected clients using `socket.emit` and `socket.on`
//    - Handle content updates with conflict resolution logic (e.g., operational transformation)

// 6. Middleware and Security
//    - JWT middleware to protect routes and validate user tokens
//    - Input validation using libraries like `Joi` or `express-validator`
//    - Error handling middleware for standardizing API responses

// 7. Example Workflow
//    a. A user logs in and retrieves a JWT token.
//    b. The user opens a document, which establishes a WebSocket connection.
//    c. The user makes edits, which are broadcasted to all connected users in real time.
//    d. The user adds comments that are visible to all collaborators.
//    e. All changes are stored with a version timestamp for history tracking.

